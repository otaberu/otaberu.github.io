"use strict";(self.webpackChunkrn_website=self.webpackChunkrn_website||[]).push([[130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"updates-2024-12-14","metadata":{"permalink":"/blog/updates-2024-12-14","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-12-16-welcome-web.md","source":"@site/blog/2024-12-16-welcome-web.md","title":"Welcome to the Web Application","description":"Meet - The Web Application","date":"2024-12-16T00:00:00.000Z","tags":[{"inline":false,"label":"Development","permalink":"/blog/tags/development","description":"Development tag description"},{"inline":false,"label":"Agent","permalink":"/blog/tags/agent","description":"Agent tag description"}],"readingTime":1.65,"hasTruncateMarker":false,"authors":[{"name":"Alex Smekhnov","title":"Developer","url":"https://github.com/smehnov","page":{"permalink":"/blog/authors/alex"},"socials":{"x":"https://x.com/asmehnov","github":"https://github.com/smehnov"},"imageURL":"https://avatars.githubusercontent.com/smehnov","key":"alex"},{"name":"Arseniy Popov","title":"Developer","url":"https://github.com/greatestParrot","page":{"permalink":"/blog/authors/arseniy"},"socials":{"x":"https://x.com/GreatestParrot","github":"https://github.com/greatestParrot"},"imageURL":"https://avatars.githubusercontent.com/greatestParrot","key":"arseniy"}],"frontMatter":{"slug":"updates-2024-12-14","title":"Welcome to the Web Application","authors":["alex","arseniy"],"tags":["development","agent"]},"unlisted":false,"nextItem":{"title":"Development Diary November 2024","permalink":"/blog/updates-2024-11-18"}},"content":"## Meet - The Web Application\\nThe journey of a thousand miles begins with a single step, and our latest step is the web application! Distributing just a CLI tool for device management is challenging. Descriptions and technical documentation often fail to convey the full picture. Plus, not everyone is comfortable installing packages on their machines. Enter the web GUI!\\n\\nWhile configuration setup remains a CLI-only feature for now, we\'ve focused our web development efforts on enhancing user functionality for running and interacting with Docker containers.\\n\\nWeb App code is available in [this repo](https://github.com/Smehnov/rn-gui).\\n\\nBut let us introduce some of functionality:\\n\\n### Settings\\nEverything starts with the settings. Here, you can specify the RPC node address, organization key, and user key. Simple and intuitive.\\n![Setings modal](https://i.ibb.co/N7bztzc/photo-2024-12-09-18-54-15.jpg)\\n\\n### List robots\\nNeed to see your fleet at a glance? The web app allows you to view a comprehensive list of all your robots.\\n![List robots](https://i.ibb.co/XYFxy2Y/photo-2024-12-09-18-49-12.jpg)\\n\\n### Add jobs\\nAdding jobs has never been easier. Just like in the CLI, the web application lets you create new jobs, including example ones. It\'s as simple as filling out a form.\\n![Add Job](https://i.ibb.co/XSw5DVG/photo-2024-12-09-19-03-32.jpg)\\n\\n### List jobs\\nCurious about what your robots are up to? The job list feature lets you see all running and completed jobs. While we\'re ironing out some date issues, the core functionality is solid.\\n![list jobs](https://i.ibb.co/kqczjz5/photo-2024-12-09-19-01-50.jpg)\\n\\n### Job Info\\nDive deep into the details with job information (even in CLI it is hottest feature of latest release) \\n![](https://i.ibb.co/Smgm608/photo-2024-12-09-19-05-18.jpg)\\n\\n### Web Terminal\\nConnecting remotely to a Docker terminal through your browser? Yes, please! We already did this with socket.io, but now full-fledged signed libp2p messages for enhanced security and consistency with agent\'s philosophy.\\n![Web Terminal](https://i.ibb.co/Hh2tFpF/photo-2024-12-09-19-08-07.jpg)\\n\\n## Next Steps\\n1. Bug fixing, polishing, testing, repeating\\n2. Web App gona be deployed at any cost (via Github Pages)\\n3. Thinking hard about system of \\"topic widgets\\" for some data streams. Imagine running job with camera capture and stream it with libp2p in your browser."},{"id":"updates-2024-11-18","metadata":{"permalink":"/blog/updates-2024-11-18","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-11-18-development-dairy.md","source":"@site/blog/2024-11-18-development-dairy.md","title":"Development Diary November 2024","description":"Default Jobs for CLI","date":"2024-11-18T00:00:00.000Z","tags":[{"inline":false,"label":"Development","permalink":"/blog/tags/development","description":"Development tag description"},{"inline":false,"label":"Agent","permalink":"/blog/tags/agent","description":"Agent tag description"}],"readingTime":5.97,"hasTruncateMarker":false,"authors":[{"name":"Alex Smekhnov","title":"Developer","url":"https://github.com/smehnov","page":{"permalink":"/blog/authors/alex"},"socials":{"x":"https://x.com/asmehnov","github":"https://github.com/smehnov"},"imageURL":"https://avatars.githubusercontent.com/smehnov","key":"alex"},{"name":"Arseniy Popov","title":"Developer","url":"https://github.com/greatestParrot","page":{"permalink":"/blog/authors/arseniy"},"socials":{"x":"https://x.com/GreatestParrot","github":"https://github.com/greatestParrot"},"imageURL":"https://avatars.githubusercontent.com/greatestParrot","key":"arseniy"}],"frontMatter":{"slug":"updates-2024-11-18","title":"Development Diary November 2024","authors":["alex","arseniy"],"tags":["development","agent"]},"unlisted":false,"prevItem":{"title":"Welcome to the Web Application","permalink":"/blog/updates-2024-12-14"}},"content":"### Default Jobs for CLI\\n\\nNow CLI have two default jobs ready to run at any time:\\n1. Docker ```hello-world:linux``` to check if you set up successully\\n```bash\\n\\nrn jobs add hello.job <ROBOT_NAME>\\n```\\n\\n2. Container with access to sh terminal inside of ```alpine:3``` docker image\\n```bash\\n\\nrn jobs add hello.job <ROBOT_NAME>\\n```\\n\\nSources of this examples could be found [here](https://github.com/Smehnov/rn/blob/main/mb/job_examples.py).\\n\\n### Robot Config are now in YAML\\n\\nThe CLI now uses .yaml for storing configuration files, as it is more readable and widely used in DevOps tools. Example configuration file:\\n```yaml\\nrobots:\\n- name: Spot\\n  robot_id: \'\'\\n  robot_peer_id: 12D3KooWFgRQ9bF2Xnu8UmVURssJLgL9gAdMdYbbs4g7fKGxkTf3\\n  robot_public_key: Vx0g5l4VGapu89LIo0dB7q6q1HLSj+5cj/Mgl0OE7U4=\\n  tags: []\\nusers:\\n- public_key: \'\'\\n  tags: []\\n  username: new_user\\nversion: 1\\n```\\n\\nMuch better than previously used unformatted .json, isn\'t it?\\n```json\\n{\\"version\\": 1, \\"robots\\": [{\\"robot_id\\": \\"\\", \\"robot_peer_id\\": \\"12D3KooWFgRQ9bF2Xnu8UmVURssJLgL9gAdMdYbbs4g7fKGxkTf3\\", \\"robot_public_key\\": \\"Vx0g5l4VGapu89LIo0dB7q6q1HLSj+5cj/Mgl0OE7U4=\\", \\"name\\": \\"Spot\\", \\"tags\\": []}], \\"users\\": [{\\"public_key\\": \\"\\", \\"username\\": \\"new_user\\", \\"tags\\": []}]}\\n```\\n\\n### Agent store job history\\nPreviously, as only job execution reached it\'s end, we\'ve got no way to get info about it. Now, agent stores history in jobs.json files locally.\\n\\n### CLI Job Info and Logs\\nBased on feature from above, CLI now can get much more than only simple status. To get detailed info about execution use\\n```bash\\nrn jobs info <ROBOT_NAME> <JOB_ID>\\n```\\nThe output is gonna be something like this:\\n```\\n{\\n    \'type\': \'MessageResponse\',\\n    \'response_type\': \'JobInfo\',\\n    \'job_info\': {\\n        \'job_type\': \'DockerJobInfo\',\\n        \'container_id\': \'ad46ad157dc1ff1af776595c834eeb5fa855d76ae497c3bbec570699a88f8caa\',\\n        \'image\': \'hello-world:linux\',\\n        \'docker_status\': \'removed\',\\n        \'last_logs\': \'\\\\nHello from Docker!\\\\nThis message shows that your installation appears to be working correctly.\\\\n\\\\nTo generate \\nthis message, Docker took the following steps:\\\\n 1. The Docker client contacted the Docker daemon.\\\\n 2. The Docker daemon pulled the \\n\\"hello-world\\" image from the Docker Hub.\\\\n    (arm64v8)\\\\n 3. The Docker daemon created a new container from that image which runs the\\\\n\\nexecutable that produces the output you are currently reading.\\\\n 4. The Docker daemon streamed that output to the Docker client, which \\nsent it\\\\n    to your terminal.\\\\n\\\\nTo try something more ambitious, you can run an Ubuntu container with:\\\\n $ docker run -it ubuntu \\nbash\\\\n\\\\nShare images, automate workflows, and more with a free Docker ID:\\\\n https://hub.docker.com/\\\\n\\\\nFor more examples and ideas, \\nvisit:\\\\n https://docs.docker.com/get-started/\\\\n\\\\n\'\\n    }\\n}\\n```\\n\\n### Encryption\\nAlthough libp2p guarantees secure channel between agents, it\'s impossible to trust over agents, especially the public ones. Now, agent supports encryption in `ChaCha20-Poly1305` format for messages. \\nUnfortunatelly, for CLI and Web-app (check next development dairy) to work, the same encryption/decryption function should be implemented on their side, so it\'s temporary disabled.\\n\\n### Wireguard setup\\nExperiments with manual setup of VPN were sucessfully conducted. Next stop is automated deployment\\n\\n### Data Storage\\nData node - agent in storage mode which stores accepted files. It may be used for storing logs, camera frames, etc. The API already has mock version. It active development to share in release.\\n\\n## Next steps\\n1. Implement encryption for CLI, so nobody could read your agent\'s messages without you letting them.\\n2. Make Wireguard network deployed automatic with only a few commands.\\n3. Convert mock API for Data Nodes into real one.\\n4. Create logs module to store each agent action in readable way.\\n\\n---\\n\\n# Development Diary 14.12.2024\\n\\nWelcome to another update on our development journey! We\'ve been hard at work and have some exciting new features and improvements to share with you. Let\'s dive in!\\n\\n***\\n\\n### Default Jobs for CLI\\n\\nWe\'re thrilled to introduce two default jobs that are ready to run at any time:\\n\\n1. Docker\'s hello-world:linux - This job is perfect for checking if everything is set up correctly. Running it will give you that warm, fuzzy feeling of success.\\n```bash\\nrn jobs add hello.job <ROBOT_NAME>\\n```\\n\\n2. Access to SH Terminal in alpine:3 - This job provides terminal access inside an Alpine Docker container. It\'s like having a tiny, powerful shell right at your fingertips.\\n\\n```bash\\nrn jobs add terminal.job <ROBOT_NAME>\\n```\\nFor the curious minds out there, you can find the sources for these examples [here](https://github.com/Smehnov/rn/blob/main/mb/job_examples.py).\\n\\n### Robot Configs Now in YAML\\n\\nIn our quest for better readability and usability, we\u2019ve switched to `.yaml` files for storing configuration data. This change makes your configs not only more readable but also aligns with common DevOps practices. Here\'s a sneak peek:\\n\\n```yaml\\nrobots:\\n- name: Spot\\n  robot_id: \'\'\\n  robot_peer_id: 12D3KooWFgRQ9bF2Xnu8UmVURssJLgL9gAdMdYbbs4g7fKGxkTf3\\n  robot_public_key: Vx0g5l4VGapu89LIo0dB7q6q1HLSj+5cj/Mgl0OE7U4=\\n  tags: []\\nusers:\\n- public_key: \'\'\\n  tags: []\\n  username: new_user\\nversion: 1\\n```\\n\\nCompare this to the old, unformatted `.json` files:\\n\\n```json\\n{\\"version\\": 1, \\"robots\\": [{\\"robot_id\\": \\"\\", \\"robot_peer_id\\": \\"12D3KooWFgRQ9bF2Xnu8UmVURssJLgL9gAdMdYbbs4g7fKGxkTf3\\", \\"robot_public_key\\": \\"Vx0g5l4VGapu89LIo0dB7q6q1HLSj+5cj/Mgl0OE7U4=\\", \\"name\\": \\"Spot\\", \\"tags\\": []}], \\"users\\": [{\\"public_key\\": \\"\\", \\"username\\": \\"new_user\\", \\"tags\\": []}]}\\n```\\nMuch better, right?\\n\\n### Agent Stores Job History\\nPreviously, as only job execution reached it\'s end, we\'ve got no way to get info about it. From now on, agent stores history in jobs.json files locally.\\n\\n\\nCLI Job Info and Logs\\nBuilding on our new job history feature, the CLI can now provide detailed information about job executions. This is like giving you a backstage pass to see what\u2019s happening behind the scenes. To get this info, use:\\n\\n```bash\\nrn jobs info <ROBOT_NAME> <JOB_ID>\\n```\\n\\nThe output will look something like this:\\n```\\n{\\n    \'type\': \'MessageResponse\',\\n    \'response_type\': \'JobInfo\',\\n    \'job_info\': {\\n        \'job_type\': \'DockerJobInfo\',\\n        \'container_id\': \'ad46ad157dc1ff1af776595c834eeb5fa855d76ae497c3bbec570699a88f8caa\',\\n        \'image\': \'hello-world:linux\',\\n        \'docker_status\': \'removed\',\\n        \'last_logs\': \'\\\\nHello from Docker!\\\\nThis message shows that your installation appears to be working correctly.\\\\n\\\\nTo generate \\nthis message, Docker took the following steps:\\\\n 1. The Docker client contacted the Docker daemon.\\\\n 2. The Docker daemon pulled the \\n\\"hello-world\\" image from the Docker Hub.\\\\n    (arm64v8)\\\\n 3. The Docker daemon created a new container from that image which runs the\\\\n\\nexecutable that produces the output you are currently reading.\\\\n 4. The Docker daemon streamed that output to the Docker client, which \\nsent it\\\\n    to your terminal.\\\\n\\\\nTo try something more ambitious, you can run an Ubuntu container with:\\\\n $ docker run -it ubuntu \\nbash\\\\n\\\\nShare images, automate workflows, and more with a free Docker ID:\\\\n https://hub.docker.com/\\\\n\\\\nFor more examples and ideas, \\nvisit:\\\\n https://docs.docker.com/get-started/\\\\n\\\\n\'\\n    }\\n}\\n```\\n\\n### Encryption\\nSecurity is a top priority. Even though libp2p guarantees a secure channel between agents, we can\'t always trust other agents, especially the public ones. Now, our agent supports message encryption using `ChaCha20-Poly1305`. However, to make this work seamlessly, we need to implement the same encryption/decryption functions on the CLI and web app (check the next diary, we did a crazy thing). So, encryption is temporarily disabled.\\n\\n### Wireguard Setup\\nWe\'ve successfully conducted experiments with manual VPN setup. The next exciting step is to automate the deployment. Soon, setting up a VPN will be as easy as pie, with just a few commands.\\n\\n### Data Storage\\nIntroducing the Data Node - an agent in storage mode that stores accepted files. Imagine it as your personal data vault, storing logs, camera frames, and more. The API already has a mock version, and we\'re actively developing it for the next release.\\n\\n\\n## Next Steps\\n1. Implement Encryption for CLI - Ensuring that your agent\'s messages remain private.\\n2. Automate Wireguard Deployment - Making VPN setup simple and hassle-free.\\n3. Develop Data Node API - Turning the mock version into a fully functional reality.\\n4. Create Logs Module - Storing each agent\'s actions in a readable format.\\n\\n---\\nThat\'s all for today\'s update! We\'re making fantastic progress. Stay tuned!"}]}}')}}]);